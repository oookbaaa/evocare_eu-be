openapi: 3.0.0
info:
  title: Products API
  description: API for managing products and product categories
  version: 1.0.0

servers:
  - url: http://localhost:3015
    description: Local development server

paths:
  /api/products/categories:
    get:
      summary: Get all categories
      description: Retrieves all product categories.
      tags:
        - Categories
      responses:
        '200':
          description: Successfully retrieved categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create category
      description: Creates a new product category. Limited to admin users.
      tags:
        - Categories
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Successfully created category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/categories/{id}:
    get:
      summary: Get category by ID
      description: Retrieves a specific product category by ID.
      tags:
        - Categories
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update category
      description: Updates a specific product category. Limited to admin users.
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Successfully updated category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete category
      description: Deletes a specific product category. Limited to admin users.
      tags:
        - Categories
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted category
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Category deleted successfully'
        '400':
          description: Bad request - category has products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/categories/{categoryId}/products:
    get:
      summary: Get products by category
      description: Retrieves products for a specific category.
      tags:
        - Products
      parameters:
        - name: categoryId
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products:
    get:
      summary: Get all products
      description: Retrieves all products.
      tags:
        - Products
      responses:
        '200':
          description: Successfully retrieved products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      summary: Create product
      description: Creates a new product. Limited to admin users.
      tags:
        - Products
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '201':
          description: Successfully created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/{id}:
    get:
      summary: Get product by ID
      description: Retrieves a specific product by ID.
      tags:
        - Products
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update product
      description: Updates a specific product. Limited to admin users.
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInput'
      responses:
        '200':
          description: Successfully updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - missing required fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete product
      description: Deletes a specific product. Limited to admin users.
      tags:
        - Products
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted product
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Product deleted successfully'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Medical Imaging System'
        description:
          type: string
          example: 'Include ultrasound and X-Ray machines'
        image_url:
          type: string
          example: '/uploads/categories/medical-imaging.jpg'
        icon_url:
          type: string
          example: '/uploads/icons/medical-imaging.png'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CategoryInput:
      type: object
      required:
        - name
        - description
        - image_url
        - icon_url
      properties:
        name:
          type: string
          example: 'Medical Imaging System'
        description:
          type: string
          example: 'Include ultrasound and X-Ray machines'
        image_url:
          type: string
          example: '/uploads/categories/medical-imaging.jpg'
        icon_url:
          type: string
          example: '/uploads/icons/medical-imaging.png'

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'XR-500 X-Ray Machine'
        description:
          type: string
          example: 'High-quality digital X-Ray system for veterinary clinics'
        image_url:
          type: string
          example: '/uploads/products/xr-500.jpg'
        category_id:
          type: integer
          example: 1
        category_name:
          type: string
          example: 'Medical Imaging System'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductInput:
      type: object
      required:
        - name
        - description
        - category_id
      properties:
        name:
          type: string
          example: 'XR-500 X-Ray Machine'
        description:
          type: string
          example: 'High-quality digital X-Ray system for veterinary clinics'
        image_url:
          type: string
          example: '/uploads/products/xr-500.jpg'
        category_id:
          type: integer
          example: 1

    Error:
      type: object
      properties:
        message:
          type: string
          example: 'Error message'
        error:
          type: string
          example: 'Detailed error description'
